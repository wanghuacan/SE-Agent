{"model_name_or_path": "iteration_1", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 79d7e4f46..eb4214be6 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -86,7 +86,11 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n         reftype = 'class'\n \n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'),\n+        # Use the current module context for resolution\n+        current_module = env.ref_context.get('py:module')\n+        if current_module and not (text.startswith(('.', '~')) or '.' in text):\n+            text = current_module + '.' + text\n+        kwargs = {'py:module': current_module,\n                   'py:class': env.ref_context.get('py:class')}\n     else:\n         kwargs = {}\ndiff --git a/test_type_xref.py b/test_type_xref.py\nnew file mode 100644\nindex 000000000..974fec8e7\n--- /dev/null\n+++ b/test_type_xref.py\n@@ -0,0 +1,30 @@\n+from sphinx.domains.python import type_to_xref\n+from sphinx import addnodes\n+from unittest.mock import Mock\n+\n+def test_type_xref():\n+    \"\"\"Test that type_to_xref properly handles module context.\"\"\"\n+    # Create a mock environment with ref_context\n+    env = Mock()\n+    env.ref_context = {'py:module': 'testmod'}\n+    \n+    # Test unqualified name in module context\n+    xref = type_to_xref('MyClass', env)\n+    assert xref['reftarget'] == 'testmod.MyClass', f\"Expected 'testmod.MyClass', got {xref['reftarget']}\"\n+    \n+    # Test qualified name (should not be modified)\n+    xref = type_to_xref('othermod.MyClass', env)\n+    assert xref['reftarget'] == 'othermod.MyClass', f\"Expected 'othermod.MyClass', got {xref['reftarget']}\"\n+    \n+    # Test name with dot prefix (should not be modified)\n+    xref = type_to_xref('.MyClass', env)\n+    assert xref['reftarget'] == '.MyClass', f\"Expected '.MyClass', got {xref['reftarget']}\"\n+    \n+    # Test name with tilde prefix (should not be modified)\n+    xref = type_to_xref('~MyClass', env)\n+    assert xref['reftarget'] == '~MyClass', f\"Expected '~MyClass', got {xref['reftarget']}\"\n+    \n+    print(\"All tests passed!\")\n+\n+if __name__ == '__main__':\n+    test_type_xref()\n\\ No newline at end of file\n"}